// Define two small matrices M and N
val M = Array(Array(1.0, 2.0), Array(3.0, 4.0))
val N = Array(Array(5.0, 6.0), Array(7.0, 8.0))
//// Convert the small matrices to RDDs
val M_RDD_Small = sc.parallelize(M.zipWithIndex.flatMap { case (row, i) => row.zipWithIndex.map { case (value, j) => ((i.toInt, j.toInt), value) } })
val N_RDD_Small = sc.parallelize(N.zipWithIndex.flatMap { case (row, i) => row.zipWithIndex.map { case (value, j) => ((i.toInt, j.toInt), value) } })
def COOMatrixMultiply(M: RDD[((Int, Int), Double)], N: RDD[((Int, Int), Double)]): RDD[((Int, Int), Double)] = {
    // Step 1: Perform a join operation on the RDDs based on the common key
    val joinedRDD = M.map { case ((i, k), m) => (k, (i, m)) }
                     .join(N.map { case ((k, j), n) => (k, (j, n)) })
                     .map { case (_, ((i, m), (j, n))) => ((i, j), m * n) }

    // Step 2: Sum the products for each unique key (i, j)
    val resultRDD = joinedRDD.reduceByKey(_ + _)

    resultRDD
}
val R_RDD_Small = COOMatrixMultiply(M_RDD_Small, N_RDD_Small)
R_RDD_Small.collect.foreach(println)
